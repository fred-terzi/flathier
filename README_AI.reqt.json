[
  {
    "generated_on": "2025-05-25T13:38:23.211Z",
    "generated_by": "ReqText v0.1.0-demo.22 (https://github.com/joseph-terzi/reqtext)"
  },
  {
    "title": "flathier",
    "readme": "FlatHier is a technical foundation for managing hierarchical data in a flat, ordered JSON format. It is engineered for maximum clarity, version control, and automation in requirements and project data management. FlatHier enables all hierarchical operations—such as add, delete, move, promote, demote, and outline computation—while maintaining a single, human-readable ordered structure.\n\n ### Demo Video\n\n ![FlatHier Demo](demo/output.gif)\n\nTechnical Highlights:\n- Flat, ordered JSON structure for efficient diffing and git integration\n- Deterministic outline and hierarchy computation for robust data integrity\n- Designed for seamless automation and programmatic manipulation\n- Enables granular tracking and editing of requirements, features, and project metadata\n- Optimized for both manual and automated workflows in modern development environments\n\nUse FlatHier to ensure your project's hierarchical data remains consistent, auditable, and ready for both human and machine consumption.",
    "readme_ai": "include"
  },
  {
    "title": "Installation",
    "readme": "To install FlatHier, run:\n\n```bash\nnpm install flathier\n```\n\nAfter installation, you can import FlatHier modules in your project. See the README for more details and usage examples.\n",
    "readme_ai": "include"
  },
  {
    "title": "addObject(): Insert new object after outline number",
    "readme": "The addObject.js module provides a function to insert a new item into a flat hierarchical data array, assign a unique ID, and update outlines. It ensures data integrity and proper error handling.\n\n**Example Usage:**\n\n```js\nimport flathier from 'flathier';\n\nconst data = [\n  { outline: '0', title: 'Root', hier: 0 },\n  { outline: '1', title: 'First Item', hier: 1 },\n  { outline: '1.1', title: 'Child', hier: 1 },\n  { outline: '2', title: 'Sibling', hier: 0 },\n  { outline: '2.1', title: 'Another Child', hier: 1 }\n  // ... more items\n];\n\nconst newItem = { title: 'New Sibling'};\n\n(async () => {\n  const updated = await flathier.addObject(data, '1', newItem);\n  // updated now contains the new item after outline '1', with a unique reqt_ID and correct outlines\n})();\n```\n\n- Note: `addObject` is accessed as a property of the main `flathier` package export. It is asynchronous and returns a Promise.\n- If not already present `hier`, `outline`, or `reqt_ID` fields, they will be added to the new item.",
    "readme_ai": "include"
  },
  {
    "title": "asciiTree(): Render flat hierarchy as ASCII-art tree",
    "readme": "The `asciiTree()` function visualizes a flat hierarchy as an ASCII-art tree, making it easy to inspect structure and relationships. It takes an array of items (each with at least 'outline' and 'title' fields) and an array of additional fields to include in the output. The function sorts items, builds parent-child relationships, and treats the first top-level item as the main root, attaching any additional top-level nodes as children. The output is an array of strings, each representing a row of the ASCII tree, with proper connectors and indentation.\n\n**Example Usage:**\n\n```js\nimport flathier from 'flathier';\n\nconst items = [\n  { outline: '1', title: 'Root' },\n  { outline: '1.1', title: 'Child A' },\n  { outline: '1.2', title: 'Child B' },\n  { outline: '2', title: 'Another Root' }\n];\n\nconst treeRows = await flathier.asciiTree(items, ['title']);\ntreeRows.forEach(row => process.stdout.write(row));\n// Output:\n// └── 1: Root\n//     ├── 1.1: Child A\n//     └── 1.2: Child B\n//     └── 2: Another Root\n```\n\n- Note: The function is asynchronous and returns an array of strings (one per row, each ending with a newline character).\n- You can specify which fields to include in each node's label by passing an array of field names as the second argument.\n- Multiple top-level nodes are attached to the first as children for a single-rooted display.",
    "readme_ai": "include"
  },
  {
    "title": "deleteObject(): Delete item by outline and update hierarchy",
    "readme": "The `deleteObject()` function removes an item from a flat hierarchical data array by outline number and updates outlines for the remaining items, ensuring data integrity. If the outline number is invalid, no changes are made and an error is logged.\n\n**Example Usage:**\n\n```js\nimport flathier from 'flathier';\n\nconst data = [\n  { outline: '0', title: 'Root', hier: 0 },\n  { outline: '1', title: 'First Item', hier: 1 },\n  { outline: '1.1', title: 'Child', hier: 1 },\n  { outline: '2', title: 'Sibling', hier: 0 }\n];\n\nconst updated = flathier.deleteObject(data, '1.1');\n// updated now contains the array with the item '1.1' removed and outlines recomputed\n```\n\n- Note: `deleteObject` is synchronous and returns the updated array, or the original array if the outline number is invalid.",
    "readme_ai": "include"
  },
  {
    "title": "demote(): Demote node and subtree one level",
    "readme": "The `demote()` function demotes a node (and its subtree) one level deeper in the hierarchy, making it the last child of its immediate previous sibling. It returns a new array with updated hierarchy and outlines. If the selection is invalid or the first item is selected, the original array is returned unchanged.\n\n**Example Usage:**\n\n```js\nimport flathier from 'flathier';\n\nconst data = [\n  { outline: '1', title: 'Root' },\n  { outline: '1.1', title: 'Child A' },\n  { outline: '1.2', title: 'Child B' }\n];\n\nconst updated = flathier.demote(data, '1.2');\n// '1.2' is now a child of '1.1', outlines and hierarchy are updated\n```\n\n- Note: `demote` is synchronous and returns the updated array, or the original array if the operation is invalid.",
    "readme_ai": "include"
  },
  {
    "title": "moveDown(): Move node and subtree down among siblings",
    "readme": "The `moveDown()` function moves a node (and its subtree) down one position among its siblings in the hierarchy, updating the order and outlines. If the node is already last or the selection is invalid, the original array is returned unchanged.\n\n**Example Usage:**\n\n```js\nimport flathier from 'flathier';\n\nconst data = [\n  { outline: '1', title: 'Root' },\n  { outline: '1.1', title: 'Child A' },\n  { outline: '1.2', title: 'Child B' }\n];\n\nconst updated = flathier.moveDown(data, '1.1');\n// '1.1' and its subtree are now after '1.2', outlines are updated\n```\n\n- Note: `moveDown` is synchronous and returns the updated array, or the original array if the operation is invalid.",
    "readme_ai": "include"
  },
  {
    "title": "moveUp(): Move node and subtree up among siblings",
    "readme": "The `moveUp()` function moves a node (and its subtree) up one position among its siblings in the hierarchy, updating the order and outlines. If the node is already first or the selection is invalid, the original array is returned unchanged.\n\n**Example Usage:**\n\n```js\nimport flathier from 'flathier';\n\nconst data = [\n  { outline: '1', title: 'Root' },\n  { outline: '1.1', title: 'Child A' },\n  { outline: '1.2', title: 'Child B' }\n];\n\nconst updated = flathier.moveUp(data, '1.2');\n// '1.2' and its subtree are now before '1.1', outlines are updated\n```\n\n- Note: `moveUp` is synchronous and returns the updated array, or the original array if the operation is invalid.",
    "readme_ai": "include"
  },
  {
    "title": "promote(): Promote node and subtree one level up",
    "readme": "The `promote()` function promotes a node (and its subtree) one level up in the hierarchy, making it a sibling of its parent. It returns a new array with updated hierarchy and outlines. If the selection is invalid or the node is already top-level, the original array is returned unchanged.\n\n**Example Usage:**\n\n```js\nimport flathier from 'flathier';\n\nconst data = [\n  { outline: '1', title: 'Root' },\n  { outline: '1.1', title: 'Child A' },\n  { outline: '1.1.1', title: 'Grandchild' }\n];\n\nconst updated = flathier.promote(data, '1.1.1');\n// '1.1.1' is now a sibling of '1.1', outlines and hierarchy are updated\n```\n\n- Note: `promote` is synchronous and returns the updated array, or the original array if the operation is invalid.",
    "readme_ai": "include"
  },
  {
    "title": "buildTree(): Build nested tree from flat array",
    "readme": "The buildTree.js utility provides a function to convert a flat hierarchy into a nested tree, enabling hierarchical operations and visualizations.",
    "readme_ai": "include"
  },
  {
    "title": "computeOutlines(): Recompute outline numbers for all items",
    "readme": "The computeOutlines.js utility ensures that all items in a flat hierarchy have correct outline numbers after any structural modification.",
    "readme_ai": "include"
  },
  {
    "title": "editTitle(): Edit the title of an item by outline",
    "readme": "The editTitle.js utility provides a function to update the title of an item in a flat hierarchy by outline number.",
    "readme_ai": "include"
  },
  {
    "title": "flattenTree(): Flatten nested tree to flat array",
    "readme": "The flattenTree.js utility provides a function to flatten a nested tree structure into a flat array for storage or further processing.",
    "readme_ai": "include"
  },
  {
    "title": "generateUniqueId(): Generate unique IDs for items",
    "readme": "The generateUniqueId.js utility provides a function to generate unique, timestamp-based IDs for use in hierarchical data structures.",
    "readme_ai": "include"
  }
]