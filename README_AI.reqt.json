[
  {
    "generated_on": "2025-05-22T16:36:59.330Z",
    "generated_by": "ReqText v0.1.0-demo.21 (https://github.com/joseph-terzi/reqtext)"
  },
  {
    "title": "flathier",
    "readme": "FlatHier is a technical foundation for managing hierarchical data in a flat, ordered JSON format. It is engineered for maximum clarity, version control, and automation in requirements and project data management. FlatHier enables all hierarchical operations—such as add, delete, move, promote, demote, and outline computation—while maintaining a single, human-readable source of truth.\n\nTechnical Highlights:\n- Flat, ordered JSON structure for efficient diffing and git integration\n- Deterministic outline and hierarchy computation for robust data integrity\n- Designed for seamless automation and programmatic manipulation\n- Enables granular tracking and editing of requirements, features, and project metadata\n- Optimized for both manual and automated workflows in modern development environments\n\nUse FlatHier to ensure your project's hierarchical data remains consistent, auditable, and ready for both human and machine consumption.",
    "readme_ai": "include"
  },
  {
    "title": "Installation",
    "readme": "To install FlatHier, run:\n\n```bash\nnpm install flathier\n```\n\nOr for global CLI usage:\n\n```bash\nnpm install -g flathier\n```\n\nAfter installation, you can import FlatHier modules in your project or use the CLI if installed globally. See the README for more details and usage examples.",
    "readme_ai": "include"
  },
  {
    "title": "addObject.js: Insert and ID new object after outline number",
    "readme": "The addObject.js module provides a function to insert a new item into a flat hierarchical data array, assign a unique ID, and update outlines. It ensures data integrity and proper error handling.",
    "readme_ai": "include"
  },
  {
    "title": "asciiTree.js: Render flat hierarchy as ASCII-art tree",
    "readme": "The asciiTree.js module provides a function to visualize a flat hierarchy as an ASCII-art tree, making it easy to inspect structure and relationships.",
    "readme_ai": "include"
  },
  {
    "title": "deleteObject.js: Delete item by outline and update hierarchy",
    "readme": "The deleteObject.js module provides a function to remove an item from a flat hierarchical data array and update outlines, ensuring data integrity.",
    "readme_ai": "include"
  },
  {
    "title": "demote.js: Demote node and subtree one level",
    "readme": "The demote.js module provides a function to demote a node and its subtree, updating the flat hierarchy structure.",
    "readme_ai": "include"
  },
  {
    "title": "moveDown.js: Move node and subtree down among siblings",
    "readme": "The moveDown.js module provides a function to move a node and its subtree down among siblings, updating the flat hierarchy structure.",
    "readme_ai": "include"
  },
  {
    "title": "moveUp.js: Move node and subtree up among siblings",
    "readme": "The moveUp.js module provides a function to move a node and its subtree up among siblings, updating the flat hierarchy structure.",
    "readme_ai": "include"
  },
  {
    "title": "promote.js: Promote node and subtree one level up",
    "readme": "The promote.js module provides a function to promote a node and its subtree, updating the flat hierarchy structure.",
    "readme_ai": "include"
  },
  {
    "title": "buildTree.js: Build nested tree from flat array",
    "readme": "The buildTree.js utility provides a function to convert a flat hierarchy into a nested tree, enabling hierarchical operations and visualizations.",
    "readme_ai": "include"
  },
  {
    "title": "computeOutlines.js: Recompute outline numbers for all items",
    "readme": "The computeOutlines.js utility ensures that all items in a flat hierarchy have correct outline numbers after any structural modification.",
    "readme_ai": "include"
  },
  {
    "title": "editTitle.js: Edit the title of an item by outline",
    "readme": "The editTitle.js utility provides a function to update the title of an item in a flat hierarchy by outline number.",
    "readme_ai": "include"
  },
  {
    "title": "flattenTree.js: Flatten nested tree to flat array",
    "readme": "The flattenTree.js utility provides a function to flatten a nested tree structure into a flat array for storage or further processing.",
    "readme_ai": "include"
  },
  {
    "title": "generateUniqueId.js: Generate unique IDs for items",
    "readme": "The generateUniqueId.js utility provides a function to generate unique, timestamp-based IDs for use in hierarchical data structures.",
    "readme_ai": "include"
  }
]